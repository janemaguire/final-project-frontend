"use strict";function Auth(e,r){e.loginUrl=r+"/login",e.signupUrl=r+"/register",e.tokenPrefix=""}function RegisterController(e,r,o){function t(){e.signup(l.user).then(function(){r.go("login")})}var l=this;if(l.user={},o.isLoggedIn=e.isAuthenticated,o.isLoggedIn()){var n=e.getPayload().id;r.go("usersShow",{id:n})}l.submit=t}function LoginController(e,r){function o(){e.login(t.credentials).then(function(){r.go("usersIndex")})}var t=this;t.credentials={},t.submit=o}function CategoriesIndexController(e){var r=this;r.all=e.query()}function CategoriesShowController(e,r){function o(){t.category.$remove(function(){r.go("categoriesIndex")})}var t=this;t.category=e.get(r.params),t.delete=o}function CategoriesEditController(e,r){function o(){t.category.$update(function(){r.go("categoriesShow",r.params)})}var t=this;t.category=e.get(r.params),t.update=o}function Category(e,r){return new e(r+"/categories/:id",{id:"@id"},{update:{method:"PUT"}})}function MainController(e,r,o,t){function l(){e.logout().then(function(){r.go("usersIndex")})}function n(o,l,n){if(s.message=null,(!e.isAuthenticated()&&i.includes(l.name)||"usersEdit"===l.name&&parseFloat(n.id)!==e.getPayload().id)&&(o.preventDefault(),r.go("login"),s.message="You must be logged in to go there"),e.isAuthenticated()){var a=e.getPayload().id;s.currentUser=t.get({id:a})}}var s=this;s.isLoggedIn=e.isAuthenticated,s.message=null;var i=["usersEdit"];o.$on("$stateChangeStart",n),s.logout=l}function Prop(e,r){return new e(r+"/props/:id",{id:"@id"},{update:{method:"PUT"}})}function PropsIndexController(e){var r=this;r.all=e.query()}function PropsNewController(e,r){function o(){e.save(t.prop,function(e){console.log("hello"),r.go("propsShow",{id:e._id})})}var t=this;t.prop={},t.create=o}function PropsShowController(e,r,o){function t(){return o.getPayload().id===Number(r.params.id)}function l(){n.prop.$remove(function(){r.go("propsIndex")})}var n=this;n.isCurrentUser=t,n.prop=e.get(r.params),n.delete=l}function PropsEditController(e,r,o,t){function l(){s.prop.$update(function(){r.go("propsShow",r.params)})}function n(e){var r=s.prop.category_ids.indexOf(e);r>-1?s.prop.category_ids.splice(r,1):s.prop.category_ids.push(e)}var s=this;s.categories=o.query(),e.get(r.params).$promise.then(function(e){s.prop=e,s.prop.user.id!==t.getPayload().id&&r.go("propsIndex")}),s.update=l,s.toggleSelection=n}function Router(e,r){e.state("usersIndex",{url:"/users",templateUrl:"/templates/usersIndex.html",controller:"UsersIndexController as usersIndex"}).state("usersShow",{url:"/users/:id",templateUrl:"/templates/usersShow.html",controller:"UsersShowController as usersShow"}).state("usersEdit",{url:"/users/:id/edit",templateUrl:"/templates/usersEdit.html",controller:"UsersEditController as usersEdit"}).state("register",{url:"/register",templateUrl:"/templates/register.html",controller:"RegisterController as register"}).state("login",{url:"/login",templateUrl:"/templates/login.html",controller:"LoginController as login"}).state("propsIndex",{url:"/props",templateUrl:"/templates/propsIndex.html",controller:"PropsIndexController as propsIndex"}).state("propsNew",{url:"/props/new",templateUrl:"/templates/propsNew.html",controller:"PropsNewController as propsNew"}).state("propsShow",{url:"/props/:id",templateUrl:"/templates/propsShow.html",controller:"PropsShowController as propsShow"}).state("propsEdit",{url:"/props/:id/edit",templateUrl:"/templates/propsEdit.html",controller:"PropsEditController as propsEdit"}).state("categoriesIndex",{url:"/categories",templateUrl:"/templates/categoriesIndex.html",controller:"CategoriesIndexController as categoriesIndex"}).state("categoriesShow",{url:"/categories/:id",templateUrl:"/templates/categoriesShow.html",controller:"CategoriesShowController as categoriesShow"}),r.otherwise("/users")}function User(e,r){return new e(r+"/users/:id",{id:"@id"},{update:{method:"PUT"}})}function UsersIndexController(e){var r=this;r.all=e.query()}function UsersShowController(e,r,o){function t(){return o.getPayload().id===Number(r.params.id)}function l(){n.user.$remove(function(){r.go("usersIndex")})}var n=this;n.isCurrentUser=t,n.user=e.get(r.params),n.delete=l}function UsersEditController(e,r){function o(){t.user.$update(function(){r.go("usersShow",r.params)})}var t=this;t.user=e.get(r.params),t.update=o}angular.module("finalProject",["ngResource","ui.router","satellizer"]).constant("API_URL","http://localhost:3000/api").config(Auth),Auth.$inject=["$authProvider","API_URL"],angular.module("finalProject").controller("RegisterController",RegisterController).controller("LoginController",LoginController),RegisterController.$inject=["$auth","$state","User"],LoginController.$inject=["$auth","$state"],angular.module("finalProject").controller("CategoriesIndexController",CategoriesIndexController).controller("CategoriesShowController",CategoriesShowController).controller("CategoriesEditController",CategoriesEditController),CategoriesIndexController.$inject=["Category"],CategoriesShowController.$inject=["Category","$state"],CategoriesEditController.$inject=["Category","$state"],angular.module("finalProject").factory("Category",Category),Category.$inject=["$resource","API_URL"],angular.module("finalProject").controller("MainController",MainController),MainController.$inject=["$auth","$state","$rootScope","User"],angular.module("finalProject").factory("Prop",Prop),Prop.$inject=["$resource","API_URL"],angular.module("finalProject").controller("PropsIndexController",PropsIndexController).controller("PropsShowController",PropsShowController).controller("PropsEditController",PropsEditController).controller("PropsNewController",PropsNewController),PropsIndexController.$inject=["Prop"],PropsNewController.$inject=["Prop","$state"],PropsShowController.$inject=["Prop","$state","$auth"],PropsEditController.$inject=["Prop","$state","Category","$auth"],angular.module("finalProject").config(Router),Router.$inject=["$stateProvider","$urlRouterProvider"],angular.module("finalProject").factory("User",User),User.$inject=["$resource","API_URL"],angular.module("finalProject").controller("UsersIndexController",UsersIndexController).controller("UsersShowController",UsersShowController).controller("UsersEditController",UsersEditController),UsersIndexController.$inject=["User"],UsersShowController.$inject=["User","$state","$auth"],UsersEditController.$inject=["User","$state"];
//# sourceMappingURL=app.js.map
