{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/categories.js","js/models/category.js","js/directives/dragDrop.js","js/controllers/main.js","js/directives/maps.js","js/models/prop.js","js/controllers/props.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","user","submit","signup","register","then","go","this","isLoggedIn","isAuthenticated","currentUserId","getPayload","id","LoginController","login","credentials","CategoriesIndexController","Category","categoriesIndex","all","query","CategoriesShowController","deleteCategory","categoriesShow","category","$remove","get","params","delete","CategoriesEditController","updateCategory","categoriesEdit","$update","update","$resource","method","dragDrop","reader","FileReader","restrict","replace","templateUrl","scope","base64","link","$scope","element","active","onload","result","$apply","on","e","preventDefault","file","target","files","dataTransfer","readAsDataURL","MainController","$rootScope","User","logout","secureState","toState","toParams","main","message","protectedStates","includes","name","parseFloat","userId","currentUser","$on","googleMap","$window","template","$watch","myLatlng","google","maps","LatLng","latitude","longitude","map","Map","center","zoom","styles","featureType","elementType","stylers","saturation","gamma","scrollwheel","Marker","position","animation","Animation","DROP","Prop","PropsIndexController","filter","prop","regex","RegExp","propsIndex","queryString","test","description","PropsNewController","create","save","propsNew","toggleSelection","index","category_ids","indexOf","splice","push","categories","PropsShowController","isCurrentUser","propsShow","$resolved","deleteProp","PropsEditController","updateProp","propsEdit","$promise","Router","$stateProvider","$urlRouterProvider","state","url","controller","otherwise","UsersIndexController","usersIndex","username","UsersShowController","Number","deleteUser","usersShow","UsersEditController","updateUser","usersEdit","angular","module","constant","config","$inject","factory","directive"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state', 'User'];\nfunction RegisterController($auth, $state, user) {\n  const register = this;\n  // this.message = message;\n\n  register.user = {};\n  user.isLoggedIn = $auth.isAuthenticated;\n\n  if (user.isLoggedIn()) {\n    const currentUserId = $auth.getPayload().id;\n    $state.go('usersShow', {id: currentUserId});\n  }\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('CategoriesIndexController', CategoriesIndexController)\n  .controller('CategoriesShowController', CategoriesShowController)\n  .controller('CategoriesEditController', CategoriesEditController);\n\nCategoriesIndexController.$inject = ['Category'];\nfunction CategoriesIndexController(Category) {\n  const categoriesIndex = this;\n\n  categoriesIndex.all = Category.query();\n}\n\nCategoriesShowController.$inject = ['Category', '$state'];\nfunction CategoriesShowController(Category, $state) {\n  const categoriesShow = this;\n\n  categoriesShow.category = Category.get($state.params);\n\n  function deleteCategory() {\n    categoriesShow.category.$remove(() => {\n      $state.go('categoriesIndex');\n    });\n  }\n\n  categoriesShow.delete = deleteCategory;\n}\n\nCategoriesEditController.$inject = ['Category', '$state'];\nfunction CategoriesEditController(Category, $state) {\n  const categoriesEdit = this;\n\n  categoriesEdit.category = Category.get($state.params);\n\n  function updateCategory() {\n    categoriesEdit.category.$update(() => {\n      $state.go('categoriesShow', $state.params);\n    });\n  }\n  categoriesEdit.update = updateCategory;\n}\n","angular.module('finalProject')\n  .factory('Category', Category);\n\nCategory.$inject = ['$resource', 'API_URL'];\nfunction Category($resource, API_URL) {\n  return new $resource(`${API_URL}/categories/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .directive('dragDrop', dragDrop);\n\nfunction dragDrop() {\n\n  const reader = new FileReader();\n\n  return {\n    restrict: 'E',\n    replace: true,\n    templateUrl: 'templates/dragDrop.html',\n    scope: {\n      base64: '='\n    },\n    link($scope, element) {\n\n      $scope.base64 = null;\n      $scope.active = false;\n\n      reader.onload = () => {\n        $scope.base64 = reader.result;\n        $scope.$apply();\n      };\n\n      element\n        .on('dragover', () => {\n          $scope.active= true;\n          $scope.$apply();\n        })\n        .on('dragover', (e) => {\n          e.preventDefault();\n        })\n        .on('dragleave', () => {\n          $scope.active= false;\n          $scope.$apply();\n        })\n        .on('drop', (e) => {\n          e.preventDefault();\n\n          const file = (e.target.files || e.dataTransfer.files)[0];\n\n          reader.readAsDataURL(file);\n        });\n    }\n\n  };\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope', 'User'];\nfunction MainController($auth, $state, $rootScope, User) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  const protectedStates = ['usersEdit', 'propsNew', 'propsEdit'];\n\n  function secureState(e, toState, toParams) {\n    main.message = null;\n    if((!$auth.isAuthenticated() && protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there';\n    }\n  }\n\n  if ($auth.isAuthenticated()) {\n    const userId = $auth.getPayload().id;\n    main.currentUser = User.get({id: userId});\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n.directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      user: '='\n    },\n    link: function($scope, element) {\n      $scope.$watch('user', () => {\n        const myLatlng = new $window.google.maps.LatLng($scope.user.latitude, $scope.user.longitude);\n        const map = new $window.google.maps.Map(element[0], {\n          center: myLatlng,\n          zoom: 13,\n          styles: [{\"featureType\":\"all\",\"elementType\":\"all\",\"stylers\":[{\"saturation\":-100},{\"gamma\":0.5}]}],\n          scrollwheel: false\n        });\n        new $window.google.maps.Marker({\n          position: myLatlng,\n          map: map,\n          animation: $window.google.maps.Animation.DROP\n        });\n      });\n\n\n      // let markers = [];\n      // function clearMarkers() {\n      //   markers.forEach((marker) => {\n      //     marker.setMap(null);\n      //   });\n      //   markers = [];\n      // }\n\n      // $scope.$watch('spaces', () => {\n      //   clearMarkers();\n      //   if($scope.spaces.$resolved) {\n      //     $scope.spaces.forEach((space) => {\n      //       // console.log(space);\n      //       if(space.lat && space.lng) {\n              // const marker = new $window.google.maps.Marker({\n              //   position: myLatlng,\n              //   map: map,\n              //   animation: $window.google.maps.Animation.DROP\n              // });\n      //         markers.push(marker);\n      //         marker.addListener('click', () => {\n      //           // console.log(space);\n      //           const contentString = `\n      //           <img src=${space.image}>\n      //           <p>Contact: ${space.user.email}</p>`;\n      //\n      //           const infoWindow = new $window.google.maps.InfoWindow({\n      //             content: contentString\n      //           });\n      //           infoWindow.open(map, marker);\n      //           console.log('oi, that hurt');\n      //         });\n      //       }\n      //     });\n      //   }\n      // }, true);\n    }\n  };\n}\n","angular.module('finalProject')\n  .factory('Prop', Prop);\n\nProp.$inject = ['$resource', 'API_URL'];\nfunction Prop($resource, API_URL) {\n  return new $resource(`${API_URL}/props/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('PropsIndexController', PropsIndexController)\n  .controller('PropsShowController', PropsShowController)\n  .controller('PropsEditController', PropsEditController)\n  .controller('PropsNewController', PropsNewController);\n\n\nPropsIndexController.$inject = ['Prop'];\nfunction PropsIndexController(Prop){\n  const propsIndex = this;\n\n  propsIndex.queryString = '';\n\n  function filter(prop) {\n    const regex = new RegExp(propsIndex.queryString, 'i');\n\n    return regex.test(prop.name) || regex.test(prop.description) || regex.test(prop.category);\n  }\n\n  propsIndex.filter = filter;\n  propsIndex.all = Prop.query();\n}\n\n\n\nPropsNewController.$inject = ['Prop', '$state', '$auth', 'Category'];\nfunction PropsNewController(Prop, $state, $auth, Category) {\n\n  if(!$auth.isAuthenticated) {\n    $state.go('propsIndex');\n  }\n\n  const propsNew = this;\n  propsNew.categories = Category.query();\n  propsNew.prop = {};\n\n  function create() {\n    Prop.save(propsNew.prop, (prop) => {\n      $state.go('propsShow', { id: prop.id });\n    });\n  }\n\n  function toggleSelection(id) {\n    var index = propsNew.prop.category_ids.indexOf(id);\n    if (index > -1) { // is currently selected\n      propsNew.prop.category_ids.splice(index, 1);\n    } else { // is newly selected\n      propsNew.prop.category_ids.push(id);\n    }\n  }\n\n  propsNew.create = create;\n  propsNew.toggleSelection = toggleSelection;\n}\n\nPropsShowController.$inject = ['Prop', '$state', '$auth'];\nfunction PropsShowController(Prop, $state, $auth) {\n  const propsShow = this;\n\n  function isCurrentUser() {\n    return $auth.isAuthenticated() && propsShow.prop.$resolved && $auth.getPayload().id === propsShow.prop.user.id;\n  }\n\n  propsShow.isCurrentUser = isCurrentUser;\n\n  propsShow.prop = Prop.get($state.params);\n\n  function deleteProp() {\n    propsShow.prop.$remove(() => {\n      $state.go('propsIndex');\n    });\n  }\n\n  propsShow.delete = deleteProp;\n}\n\nPropsEditController.$inject = ['Prop', '$state', 'Category', '$auth'];\nfunction PropsEditController(Prop, $state, Category, $auth) {\n  const propsEdit = this;\n\n  propsEdit.categories = Category.query();\n\n  Prop.get($state.params).$promise.then((prop) => {\n    propsEdit.prop = prop;\n\n    if(propsEdit.prop.user.id !== $auth.getPayload().id) {\n      $state.go('propsIndex');\n    }\n\n  });\n\n  function updateProp() {\n    propsEdit.prop.$update(() => {\n      $state.go('propsShow', $state.params);\n    });\n  }\n\n  function toggleSelection(id) {\n    var index = propsEdit.prop.category_ids.indexOf(id);\n    if (index > -1) { // is currently selected\n      propsEdit.prop.category_ids.splice(index, 1);\n    } else { // is newly selected\n      propsEdit.prop.category_ids.push(id);\n    }\n  }\n\n  propsEdit.update = updateProp;\n  propsEdit.toggleSelection = toggleSelection;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('propsIndex', {\n      url: '/props',\n      templateUrl: '/templates/propsIndex.html',\n      controller: 'PropsIndexController as propsIndex'\n    })\n    .state('propsNew', {\n      url: '/props/new',\n      templateUrl: '/templates/propsNew.html',\n      controller: 'PropsNewController as propsNew'\n    })\n    .state('propsShow', {\n      url: '/props/:id',\n      templateUrl: '/templates/propsShow.html',\n      controller: 'PropsShowController as propsShow'\n    })\n    .state('propsEdit', {\n      url: '/props/:id/edit',\n      templateUrl: '/templates/propsEdit.html',\n      controller: 'PropsEditController as propsEdit'\n    })\n    .state('categoriesShow', {\n      url: '/categories/:id',\n      templateUrl: '/templates/categoriesShow.html',\n      controller: 'CategoriesShowController as categoriesShow'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.queryString = '';\n\n  function filter(user) {\n    const regex = new RegExp(usersIndex.queryString, 'i');\n\n    return regex.test(user.username);\n  }\n\n  usersIndex.filter = filter;\n  usersIndex.all = User.query();\n}\n\n\n\n\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n\n  usersShow.isCurrentUser = isCurrentUser;\n\n  usersShow.user = User.get($state.params);\n\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function updateUser() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = updateUser;\n}\n"]}