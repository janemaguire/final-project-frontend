{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/categories.js","js/models/category.js","js/controllers/main.js","js/models/prop.js","js/controllers/props.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","CategoriesIndexController","Category","categoriesIndex","all","query","CategoriesShowController","deleteCategory","categoriesShow","category","$remove","get","params","delete","CategoriesEditController","updateCategory","categoriesEdit","$update","update","$resource","id","method","MainController","$rootScope","logout","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","$on","Prop","PropsIndexController","propsIndex","PropsShowController","deleteProp","propsShow","prop","PropsEditController","updateProp","propsEdit","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","updateUser","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('CategoriesIndexController', CategoriesIndexController)\n  .controller('CategoriesShowController', CategoriesShowController)\n  .controller('CategoriesEditController', CategoriesEditController);\n\nCategoriesIndexController.$inject = ['Category'];\nfunction CategoriesIndexController(Category) {\n  const categoriesIndex = this;\n\n  categoriesIndex.all = Category.query();\n}\n\nCategoriesShowController.$inject = ['Category', '$state'];\nfunction CategoriesShowController(Category, $state) {\n  const categoriesShow = this;\n\n  categoriesShow.category = Category.get($state.params);\n\n  function deleteCategory() {\n    categoriesShow.category.$remove(() => {\n      $state.go('categoriesIndex');\n    });\n  }\n\n  categoriesShow.delete = deleteCategory;\n}\n\nCategoriesEditController.$inject = ['Category', '$state'];\nfunction CategoriesEditController(Category, $state) {\n  const categoriesEdit = this;\n\n  categoriesEdit.category = Category.get($state.params);\n\n  function updateCategory() {\n    categoriesEdit.category.$update(() => {\n      $state.go('categoriesShow', $state.params);\n    });\n  }\n  categoriesEdit.update = updateCategory;\n}\n","angular.module('finalProject')\n  .factory('Category', Category);\n\nCategory.$inject = ['$resource', 'API_URL'];\nfunction Category($resource, API_URL) {\n  return new $resource(`${API_URL}/categories/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there';\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Prop', Prop);\n\nProp.$inject = ['$resource', 'API_URL'];\nfunction Prop($resource, API_URL) {\n  return new $resource(`${API_URL}/props/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('PropsIndexController', PropsIndexController)\n  .controller('PropsShowController', PropsShowController)\n  .controller('PropsEditController', PropsEditController);\n\nPropsIndexController.$inject = ['Prop'];\nfunction PropsIndexController(Prop) {\n  const propsIndex = this;\n\n  propsIndex.all = Prop.query();\n}\n\nPropsShowController.$inject = ['Prop', '$state'];\nfunction PropsShowController(Prop, $state) {\n  const propsShow = this;\n\n  propsShow.prop = Prop.get($state.params);\n\n  function deleteProp() {\n    propsShow.prop.$remove(() => {\n      $state.go('propsIndex');\n    });\n  }\n\n  propsShow.delete = deleteProp;\n}\n\nPropsEditController.$inject = ['Prop', '$state'];\nfunction PropsEditController(Prop, $state) {\n  const propsEdit = this;\n\n  propsEdit.prop = Prop.get($state.params);\n\n  function updateProp() {\n    propsEdit.prop.$update(() => {\n      $state.go('propsShow', $state.params);\n    });\n  }\n  propsEdit.update = updateProp;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('propsIndex', {\n      url: '/props',\n      templateUrl: '/templates/propsIndex.html',\n      controller: 'PropsIndexController as propsIndex'\n    })\n    .state('propsShow', {\n      url: '/props/:id',\n      templateUrl: '/templates/propsShow.html',\n      controller: 'PropsShowController as propsShow'\n    })\n    .state('propsEdit', {\n      url: '/props/:id/edit',\n      templateUrl: '/templates/propsEdit.html',\n      controller: 'PropsEditController as propsEdit'\n    })\n    .state('categoriesIndex', {\n      url: '/categories',\n      templateUrl: '/templates/categoriesIndex.html',\n      controller: 'CategoriesIndexController as categoriesIndex'\n    })\n    .state('categoriesShow', {\n      url: '/categories/:id',\n      templateUrl: '/templates/categoriesShow.html',\n      controller: 'CategoriesShowController as categoriesShow'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state'];\nfunction UsersShowController(User, $state) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function updateUser() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = updateUser;\n}\n"]}