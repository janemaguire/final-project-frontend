{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/categories.js","js/models/category.js","js/controllers/main.js","js/models/prop.js","js/controllers/props.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","user","submit","signup","register","then","go","this","isLoggedIn","isAuthenticated","currentUserId","getPayload","id","LoginController","login","credentials","CategoriesIndexController","Category","categoriesIndex","all","query","CategoriesShowController","deleteCategory","categoriesShow","category","$remove","get","params","delete","CategoriesEditController","updateCategory","categoriesEdit","$update","update","$resource","method","MainController","$rootScope","User","logout","secureState","e","toState","toParams","main","message","protectedStates","includes","name","parseFloat","preventDefault","userId","currentUser","$on","Prop","PropsIndexController","propsIndex","PropsShowController","isCurrentUser","console","log","Number","deleteProp","propsShow","prop","PropsEditController","updateProp","propsEdit","toggleSelection","index","category_ids","indexOf","splice","push","categories","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","updateUser","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state', 'User'];\nfunction RegisterController($auth, $state, user) {\n  const register = this;\n  // this.message = message;\n\n  register.user = {};\n  user.isLoggedIn = $auth.isAuthenticated;\n\n  if (user.isLoggedIn()) {\n    const currentUserId = $auth.getPayload().id;\n    $state.go('usersShow', {id: currentUserId});\n  }\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('CategoriesIndexController', CategoriesIndexController)\n  .controller('CategoriesShowController', CategoriesShowController)\n  .controller('CategoriesEditController', CategoriesEditController);\n\nCategoriesIndexController.$inject = ['Category'];\nfunction CategoriesIndexController(Category) {\n  const categoriesIndex = this;\n\n  categoriesIndex.all = Category.query();\n}\n\nCategoriesShowController.$inject = ['Category', '$state'];\nfunction CategoriesShowController(Category, $state) {\n  const categoriesShow = this;\n\n  categoriesShow.category = Category.get($state.params);\n\n  function deleteCategory() {\n    categoriesShow.category.$remove(() => {\n      $state.go('categoriesIndex');\n    });\n  }\n\n  categoriesShow.delete = deleteCategory;\n}\n\nCategoriesEditController.$inject = ['Category', '$state'];\nfunction CategoriesEditController(Category, $state) {\n  const categoriesEdit = this;\n\n  categoriesEdit.category = Category.get($state.params);\n\n  function updateCategory() {\n    categoriesEdit.category.$update(() => {\n      $state.go('categoriesShow', $state.params);\n    });\n  }\n  categoriesEdit.update = updateCategory;\n}\n","angular.module('finalProject')\n  .factory('Category', Category);\n\nCategory.$inject = ['$resource', 'API_URL'];\nfunction Category($resource, API_URL) {\n  return new $resource(`${API_URL}/categories/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope', 'User'];\nfunction MainController($auth, $state, $rootScope, User) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  const protectedStates = ['usersEdit', 'propsEdit'];\n\n  function secureState(e, toState, toParams) {\n    main.message = null;\n    if((!$auth.isAuthenticated() && protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there';\n    }\n\n  // function secureState(e, toState, toParams) {\n  //   main.message = null;\n  //   if((!$auth.isAuthenticated() && protectedStates.includes(toState.name)) ||\n  //   toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n  //     e.preventDefault();\n  //     $state.go('login');\n  //     main.message = 'You must be logged in to go there';\n  //   }\n\n\n\n    if ($auth.isAuthenticated()) {\n      const userId = $auth.getPayload().id;\n      main.currentUser = User.get({id: userId});\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Prop', Prop);\n\nProp.$inject = ['$resource', 'API_URL'];\nfunction Prop($resource, API_URL) {\n  return new $resource(`${API_URL}/props/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('PropsIndexController', PropsIndexController)\n  .controller('PropsShowController', PropsShowController)\n  .controller('PropsEditController', PropsEditController);\n\nPropsIndexController.$inject = ['Prop'];\nfunction PropsIndexController(Prop) {\n  const propsIndex = this;\n\n  propsIndex.all = Prop.query();\n}\n\nPropsShowController.$inject = ['Prop', '$state', '$auth'];\nfunction PropsShowController(Prop, $state, $auth) {\n  const propsShow = this;\n\n  function isCurrentUser() {\n    console.log('isCurrentUser?', $auth.getPayload().id === Number($state.params.id));\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n\n  propsShow.isCurrentUser = isCurrentUser;\n\n  propsShow.prop = Prop.get($state.params);\n\n  function deleteProp() {\n    propsShow.prop.$remove(() => {\n      $state.go('propsIndex');\n    });\n  }\n\n  propsShow.delete = deleteProp;\n}\n\nPropsEditController.$inject = ['Prop', '$state', 'Category'];\nfunction PropsEditController(Prop, $state, Category) {\n  const propsEdit = this;\n\n  propsEdit.categories = Category.query();\n\n  propsEdit.prop = Prop.get($state.params);\n\n  function updateProp() {\n    propsEdit.prop.$update(() => {\n      $state.go('propsShow', $state.params);\n    });\n  }\n\n  function toggleSelection(id) {\n    var index = propsEdit.prop.category_ids.indexOf(id);\n    if (index > -1) { // is currently selected\n      propsEdit.prop.category_ids.splice(index, 1);\n    } else { // is newly selected\n      propsEdit.prop.category_ids.push(id);\n    }\n  }\n\n  propsEdit.update = updateProp;\n  propsEdit.toggleSelection = toggleSelection;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('propsIndex', {\n      url: '/props',\n      templateUrl: '/templates/propsIndex.html',\n      controller: 'PropsIndexController as propsIndex'\n    })\n    .state('propsShow', {\n      url: '/props/:id',\n      templateUrl: '/templates/propsShow.html',\n      controller: 'PropsShowController as propsShow'\n    })\n    .state('propsEdit', {\n      url: '/props/:id/edit',\n      templateUrl: '/templates/propsEdit.html',\n      controller: 'PropsEditController as propsEdit'\n    })\n    .state('categoriesIndex', {\n      url: '/categories',\n      templateUrl: '/templates/categoriesIndex.html',\n      controller: 'CategoriesIndexController as categoriesIndex'\n    })\n    .state('categoriesShow', {\n      url: '/categories/:id',\n      templateUrl: '/templates/categoriesShow.html',\n      controller: 'CategoriesShowController as categoriesShow'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n\n  usersShow.isCurrentUser = isCurrentUser;\n\n  usersShow.user = User.get($state.params);\n\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function updateUser() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  usersEdit.update = updateUser;\n}\n"]}